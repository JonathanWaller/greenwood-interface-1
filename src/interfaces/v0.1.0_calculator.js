const calculator = {
  "contractName": "alpha_calculator",
  "abi": [
    {
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_ctoken_addr"
        },
        {
          "type": "address",
          "name": "_model_addr"
        },
        {
          "type": "uint256",
          "name": "_initial_block"
        },
        {
          "type": "uint256",
          "name": "_initial_borrow_apy"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "name": "getBorrowIndex",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 1475,
      "constant": true
    },
    {
      "name": "getBorrowApy",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "function",
      "gas": 77850
    },
    {
      "name": "getFee",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "int128",
          "name": "_total_liquidity"
        },
        {
          "type": "int128",
          "name": "_fee_base"
        },
        {
          "type": "int128",
          "name": "_active_collateral"
        },
        {
          "type": "int128",
          "name": "_utilization_inflection"
        },
        {
          "type": "int128",
          "name": "_fee_sensitivity"
        },
        {
          "type": "int128",
          "name": "_utilization_multiplier"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 3602,
      "constant": true
    }
  ],
  "bytecode": "0x740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a0526080610bb26101403934156100a157600080fd5b6020610bb260c03960c05160205181106100ba57600080fd5b5060206020610bb20160c03960c05160205181106100d757600080fd5b506101405160005561016051600155610180516003556402540be4006101a0510260805181111561010757600080fd5b6b204fce5e3e2502611000000060a051818061012257600080fd5b6402540be4008402058060805190131561013b57600080fd5b809190121561014957600080fd5b90509050600255610b9a56600436101561000d57610a3f565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263c8add11f60005114156100fa5734156100ba57600080fd5b60206101a0600463aa5af0fd6101405261015c6000545afa6100db57600080fd5b601f3d116100e857600080fd5b6000506101a05160005260206000f350005b63b54f4d8760005114156103ea57341561011357600080fd5b60206101c06004633b1d21a26101605261017c6000545afa61013457600080fd5b601f3d1161014157600080fd5b6000506101c05161014052602061026060046347bd37186102005261021c6000545afa61016d57600080fd5b601f3d1161017a57600080fd5b600050610260516101e05260206103006004638f840ddd6102a0526102bc6000545afa6101a657600080fd5b601f3d116101b357600080fd5b60005061030051610280526402540be400602061040060646315f240536103405261014051610360526101e05161038052610280516103a05261035c6001545afa6101fd57600080fd5b601f3d1161020a57600080fd5b600050610400510260805181111561022157600080fd5b6103205243610420526402540be400610420516003548082101561024457600080fd5b808203905090500260805181111561025b57600080fd5b610440526402540be40061044051610320516b204fce5e3e2502611000000060a051818061028857600080fd5b6402540be400840205806080519013156102a157600080fd5b80919012156102af57600080fd5b9050905060a05181830283158385830514176102ca57600080fd5b6402540be40081059050806080519013156102e457600080fd5b80919012156102f257600080fd5b9050905060a0518183018060805190131561030c57600080fd5b809190121561031a57600080fd5b9050905060025460a051818302831583858305141761033857600080fd5b6402540be400810590508060805190131561035257600080fd5b809190121561036057600080fd5b905090506104605261046051600255610420516003556402540be400610460516b204fce5e3e2502611000000060a05181830283158385830514176103a457600080fd5b6402540be40081059050806080519013156103be57600080fd5b80919012156103cc57600080fd5b9050905060008112156103de57600080fd5b0460005260206000f350005b639fbe99036000511415610a3e57341561040357600080fd5b6060516004358060405190131561041957600080fd5b809190121561042757600080fd5b506060516024358060405190131561043e57600080fd5b809190121561044c57600080fd5b506060516044358060405190131561046357600080fd5b809190121561047157600080fd5b506060516064358060405190131561048857600080fd5b809190121561049657600080fd5b50606051608435806040519013156104ad57600080fd5b80919012156104bb57600080fd5b5060605160a435806040519013156104d257600080fd5b80919012156104e057600080fd5b506402540be40060043502600160a051818302831583858305141761050457600080fd5b6402540be400810590508060805190131561051e57600080fd5b809190121561052c57600080fd5b90509050610140526402540be40060243502600160a051818302831583858305141761055757600080fd5b6402540be400810590508060805190131561057157600080fd5b809190121561057f57600080fd5b90509050610160526402540be40060443502600160a05181830283158385830514176105aa57600080fd5b6402540be40081059050806080519013156105c457600080fd5b80919012156105d257600080fd5b90509050610180526402540be40060643502600160a05181830283158385830514176105fd57600080fd5b6402540be400810590508060805190131561061757600080fd5b809190121561062557600080fd5b905090506101a0526402540be40060843502600160a051818302831583858305141761065057600080fd5b6402540be400810590508060805190131561066a57600080fd5b809190121561067857600080fd5b905090506101c0526402540be40060a43502600160a05181830283158385830514176106a357600080fd5b6402540be40081059050806080519013156106bd57600080fd5b80919012156106cb57600080fd5b905090506101e052610140511515610754576402540be400610160516b204fce5e3e2502611000000060a051818302831583858305141761070b57600080fd5b6402540be400810590508060805190131561072557600080fd5b809190121561073357600080fd5b90509050600081121561074557600080fd5b0460005260206000f350610a3c565b610180516101405160a051818061076a57600080fd5b6402540be4008402058060805190131561078357600080fd5b809190121561079157600080fd5b90509050610200526101a05161020051131561096a576101c0516101e05160a05181830283158385830514176107c657600080fd5b6402540be40081059050806080519013156107e057600080fd5b80919012156107ee57600080fd5b90509050610220526402540be400610200516101c05160a051818302831583858305141761081b57600080fd5b6402540be400810590508060805190131561083557600080fd5b809190121561084357600080fd5b905090506101605160a0518183018060805190131561086157600080fd5b809190121561086f57600080fd5b90509050610200516101a05160a0518183038060805190131561089157600080fd5b809190121561089f57600080fd5b905090506102205160a05181830283158385830514176108be57600080fd5b6402540be40081059050806080519013156108d857600080fd5b80919012156108e657600080fd5b9050905060a0518183018060805190131561090057600080fd5b809190121561090e57600080fd5b90509050600160a051818061092257600080fd5b6402540be4008402058060805190131561093b57600080fd5b809190121561094957600080fd5b90509050600081121561095b57600080fd5b0460005260206000f350610a3b565b6402540be400610200516101c05160a051818302831583858305141761098f57600080fd5b6402540be40081059050806080519013156109a957600080fd5b80919012156109b757600080fd5b905090506101605160a051818301806080519013156109d557600080fd5b80919012156109e357600080fd5b90509050600160a05181806109f757600080fd5b6402540be40084020580608051901315610a1057600080fd5b8091901215610a1e57600080fd5b905090506000811215610a3057600080fd5b0460005260206000f3505b5b005b5b60006000fd5b610155610b9a03610155600039610155610b9a036000f3",
  "deployedBytecode": "0x600436101561000d57610a3f565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263c8add11f60005114156100fa5734156100ba57600080fd5b60206101a0600463aa5af0fd6101405261015c6000545afa6100db57600080fd5b601f3d116100e857600080fd5b6000506101a05160005260206000f350005b63b54f4d8760005114156103ea57341561011357600080fd5b60206101c06004633b1d21a26101605261017c6000545afa61013457600080fd5b601f3d1161014157600080fd5b6000506101c05161014052602061026060046347bd37186102005261021c6000545afa61016d57600080fd5b601f3d1161017a57600080fd5b600050610260516101e05260206103006004638f840ddd6102a0526102bc6000545afa6101a657600080fd5b601f3d116101b357600080fd5b60005061030051610280526402540be400602061040060646315f240536103405261014051610360526101e05161038052610280516103a05261035c6001545afa6101fd57600080fd5b601f3d1161020a57600080fd5b600050610400510260805181111561022157600080fd5b6103205243610420526402540be400610420516003548082101561024457600080fd5b808203905090500260805181111561025b57600080fd5b610440526402540be40061044051610320516b204fce5e3e2502611000000060a051818061028857600080fd5b6402540be400840205806080519013156102a157600080fd5b80919012156102af57600080fd5b9050905060a05181830283158385830514176102ca57600080fd5b6402540be40081059050806080519013156102e457600080fd5b80919012156102f257600080fd5b9050905060a0518183018060805190131561030c57600080fd5b809190121561031a57600080fd5b9050905060025460a051818302831583858305141761033857600080fd5b6402540be400810590508060805190131561035257600080fd5b809190121561036057600080fd5b905090506104605261046051600255610420516003556402540be400610460516b204fce5e3e2502611000000060a05181830283158385830514176103a457600080fd5b6402540be40081059050806080519013156103be57600080fd5b80919012156103cc57600080fd5b9050905060008112156103de57600080fd5b0460005260206000f350005b639fbe99036000511415610a3e57341561040357600080fd5b6060516004358060405190131561041957600080fd5b809190121561042757600080fd5b506060516024358060405190131561043e57600080fd5b809190121561044c57600080fd5b506060516044358060405190131561046357600080fd5b809190121561047157600080fd5b506060516064358060405190131561048857600080fd5b809190121561049657600080fd5b50606051608435806040519013156104ad57600080fd5b80919012156104bb57600080fd5b5060605160a435806040519013156104d257600080fd5b80919012156104e057600080fd5b506402540be40060043502600160a051818302831583858305141761050457600080fd5b6402540be400810590508060805190131561051e57600080fd5b809190121561052c57600080fd5b90509050610140526402540be40060243502600160a051818302831583858305141761055757600080fd5b6402540be400810590508060805190131561057157600080fd5b809190121561057f57600080fd5b90509050610160526402540be40060443502600160a05181830283158385830514176105aa57600080fd5b6402540be40081059050806080519013156105c457600080fd5b80919012156105d257600080fd5b90509050610180526402540be40060643502600160a05181830283158385830514176105fd57600080fd5b6402540be400810590508060805190131561061757600080fd5b809190121561062557600080fd5b905090506101a0526402540be40060843502600160a051818302831583858305141761065057600080fd5b6402540be400810590508060805190131561066a57600080fd5b809190121561067857600080fd5b905090506101c0526402540be40060a43502600160a05181830283158385830514176106a357600080fd5b6402540be40081059050806080519013156106bd57600080fd5b80919012156106cb57600080fd5b905090506101e052610140511515610754576402540be400610160516b204fce5e3e2502611000000060a051818302831583858305141761070b57600080fd5b6402540be400810590508060805190131561072557600080fd5b809190121561073357600080fd5b90509050600081121561074557600080fd5b0460005260206000f350610a3c565b610180516101405160a051818061076a57600080fd5b6402540be4008402058060805190131561078357600080fd5b809190121561079157600080fd5b90509050610200526101a05161020051131561096a576101c0516101e05160a05181830283158385830514176107c657600080fd5b6402540be40081059050806080519013156107e057600080fd5b80919012156107ee57600080fd5b90509050610220526402540be400610200516101c05160a051818302831583858305141761081b57600080fd5b6402540be400810590508060805190131561083557600080fd5b809190121561084357600080fd5b905090506101605160a0518183018060805190131561086157600080fd5b809190121561086f57600080fd5b90509050610200516101a05160a0518183038060805190131561089157600080fd5b809190121561089f57600080fd5b905090506102205160a05181830283158385830514176108be57600080fd5b6402540be40081059050806080519013156108d857600080fd5b80919012156108e657600080fd5b9050905060a0518183018060805190131561090057600080fd5b809190121561090e57600080fd5b90509050600160a051818061092257600080fd5b6402540be4008402058060805190131561093b57600080fd5b809190121561094957600080fd5b90509050600081121561095b57600080fd5b0460005260206000f350610a3b565b6402540be400610200516101c05160a051818302831583858305141761098f57600080fd5b6402540be40081059050806080519013156109a957600080fd5b80919012156109b757600080fd5b905090506101605160a051818301806080519013156109d557600080fd5b80919012156109e357600080fd5b90509050600160a05181806109f757600080fd5b6402540be40084020580608051901315610a1057600080fd5b8091901215610a1e57600080fd5b905090506000811215610a3057600080fd5b0460005260206000f3505b5b005b5b60006000fd",
  "source": "# (c) 2020 Greenwood\n# @title Greenwood Calculator\n# @author Greenwood (Attribution: Max Wolff, http://maxcwolff.com/rhoSpec.pdf)\n# @notice An external calculation contract for the Greenwood protocol\n\ninterface CTOKEN:\n    def borrowIndex() -> uint256: view\n    def getCash() -> uint256: view\n    def totalBorrows() -> uint256: view\n    def totalReserves() -> uint256: view\n\ninterface MODEL:\n    def getBorrowRate(_cash: uint256, _borrows: uint256, _reserves: uint256) -> uint256: view\n\nBLOCKS_PER_DAY: constant(decimal) = 5760.0\nETH_PRECISION: constant(decimal) = 1000000000000000000.0\nCONTRACT_PRECISION: constant(decimal) = 0.0000000001\nDECIMAL_ZERO: constant(decimal) = 0.0\n\ncTokenHandle: CTOKEN\nmodelHandle: MODEL\nprevBorrowApy: decimal\nprevAccruedBlock: uint256\n\n@external\ndef __init__(_ctoken_addr: address, _model_addr: address, _initial_block: uint256, _initial_borrow_apy: uint256):\n    self.cTokenHandle = CTOKEN(_ctoken_addr)\n    self.modelHandle = MODEL(_model_addr)\n    self.prevAccruedBlock = _initial_block\n    self.prevBorrowApy = convert(_initial_borrow_apy, decimal) / ETH_PRECISION\n\n@external \n@view\ndef getBorrowIndex() -> uint256:\n    return self.cTokenHandle.borrowIndex()\n\n@external\ndef getBorrowApy() -> uint256:\n    cash: uint256 = self.cTokenHandle.getCash()\n    borrows: uint256 = self.cTokenHandle.totalBorrows()\n    reserves: uint256 = self.cTokenHandle.totalReserves()\n\n    borrowRate: decimal = convert(self.modelHandle.getBorrowRate(cash, borrows, reserves), decimal)\n\n    currentBlock: uint256 = block.number\n    blocksAccrued: decimal = convert(currentBlock - self.prevAccruedBlock, decimal)\n\n    newBorrowApy: decimal = (1.0 + blocksAccrued * (borrowRate / ETH_PRECISION)) * self.prevBorrowApy\n\n    self.prevBorrowApy = newBorrowApy\n    self.prevAccruedBlock = currentBlock\n    \n    return convert(newBorrowApy * ETH_PRECISION, uint256)\n\n@external\n@view\ndef getFee(_total_liquidity: int128, _fee_base: int128, _active_collateral: int128, _utilization_inflection: int128, _fee_sensitivity: int128, _utilization_multiplier: int128) -> uint256:\n    totalLiquidity: decimal = convert(_total_liquidity, decimal) * CONTRACT_PRECISION\n    feeBase: decimal = convert(_fee_base,decimal) * CONTRACT_PRECISION\n    activeCollateral: decimal = convert(_active_collateral,decimal) * CONTRACT_PRECISION\n    utilizationInflection: decimal = convert(_utilization_inflection,decimal) * CONTRACT_PRECISION\n    feeSensitivity: decimal = convert(_fee_sensitivity, decimal) * CONTRACT_PRECISION\n    utilizationMultiplier: decimal = convert(_utilization_multiplier, decimal) * CONTRACT_PRECISION\n\n    if totalLiquidity == DECIMAL_ZERO:\n        return convert(feeBase * ETH_PRECISION, uint256)\n    else:\n        utilization: decimal = activeCollateral / totalLiquidity\n        if utilization > utilizationInflection:\n            feeMultiplier: decimal = feeSensitivity * utilizationMultiplier\n            return convert(((utilization * feeSensitivity + feeBase) + ((utilization - utilizationInflection) * feeMultiplier)) / CONTRACT_PRECISION, uint256)\n\n        else:\n            return convert((utilization * feeSensitivity + feeBase) / CONTRACT_PRECISION, uint256)",
  "sourcePath": "/Users/brandonmcfaraland/Desktop/protocol/dev_protocol_contracts/contracts/alpha/alpha_calculator.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.2.3+commit.006968f"
  },
  "networks": {
    "1": {
      "events": {},
      "links": {},
      "address": "0xE3047997Cd548806894ECcA7Caf6aBaeB083E5c7",
      "transactionHash": "0x6ff961c153806e645466491dc85639cdf91dc52f991603e6e7a400711d1bd4ee"
    },
    "42": {
      "events": {},
      "links": {},
      "address": "0xa27fc71004f7f16FEe1be0bee1FC835F413aBf68",
      "transactionHash": "0xf63304118dae595aafb28a50403158783b987ede354491c13df491213ad7a87b"
    }
  },
  "schemaVersion": "3.2.0",
  "updatedAt": "2020-11-15T23:01:05.681Z",
  "networkType": "ethereum"
}
  
  module.exports = calculator;