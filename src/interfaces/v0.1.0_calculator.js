const calculator = {
  "contractName": "alpha_calculator",
  "abi": [
    {
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_ctoken_addr"
        },
        {
          "type": "address",
          "name": "_model_addr"
        },
        {
          "type": "uint256",
          "name": "_initial_block"
        },
        {
          "type": "uint256",
          "name": "initial_float_index"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "name": "getFloatIndex",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [],
      "stateMutability": "view",
      "type": "function",
      "gas": 151108,
      "constant": true
    },
    {
      "name": "getFee",
      "outputs": [
        {
          "type": "uint256",
          "name": ""
        }
      ],
      "inputs": [
        {
          "type": "int128",
          "name": "_total_liquidity"
        },
        {
          "type": "int128",
          "name": "_fee_base"
        },
        {
          "type": "int128",
          "name": "_active_collateral"
        },
        {
          "type": "int128",
          "name": "_utilization_inflection"
        },
        {
          "type": "int128",
          "name": "_fee_sensitivity"
        },
        {
          "type": "int128",
          "name": "_utilization_multiplier"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "gas": 3572,
      "constant": true
    }
  ],
  "bytecode": "0x740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a0526080610b506101403934156100a157600080fd5b6020610b5060c03960c05160205181106100ba57600080fd5b5060206020610b500160c03960c05160205181106100d757600080fd5b506101405160005561016051600155610180516003556402540be4006101a0510260805181111561010757600080fd5b6b204fce5e3e2502611000000060a051818061012257600080fd5b6402540be4008402058060805190131561013b57600080fd5b809190121561014957600080fd5b90509050600255610b3856600436101561000d576109dd565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a052632e6e4f3160005114156103885734156100ba57600080fd5b6402540be40060206101c0600463f8f9da286101605261017c6000545afa6100e157600080fd5b601f3d116100ee57600080fd5b6000506101c0510260805181111561010557600080fd5b61014052610140516b204fce5e3e2502611000000060a051818061012857600080fd5b6402540be4008402058060805190131561014157600080fd5b809190121561014f57600080fd5b905090506534630b8a000060a051818302831583858305141761017157600080fd5b6402540be400810590508060805190131561018b57600080fd5b809190121561019957600080fd5b905090506402540be40060a051818301806080519013156101b957600080fd5b80919012156101c757600080fd5b905090506101e0526101e0516101e05160a05181830283158385830514176101ee57600080fd5b6402540be400810590508060805190131561020857600080fd5b809190121561021657600080fd5b9050905061020052610220600061016a818352015b610200516101e05160a051818302831583858305141761024a57600080fd5b6402540be400810590508060805190131561026457600080fd5b809190121561027257600080fd5b90509050610200525b815160010180835281141561022b575b5050610200516402540be40060a051818303806080519013156102ad57600080fd5b80919012156102bb57600080fd5b90509050610240526102405164e8d4a5100060a05181830283158385830514176102e457600080fd5b6402540be40081059050806080519013156102fe57600080fd5b809190121561030c57600080fd5b90509050610260526402540be400610260516b204fce5e3e2502611000000060a051818302831583858305141761034257600080fd5b6402540be400810590508060805190131561035c57600080fd5b809190121561036a57600080fd5b90509050600081121561037c57600080fd5b0460005260206000f350005b639fbe990360005114156109dc5734156103a157600080fd5b606051600435806040519013156103b757600080fd5b80919012156103c557600080fd5b50606051602435806040519013156103dc57600080fd5b80919012156103ea57600080fd5b506060516044358060405190131561040157600080fd5b809190121561040f57600080fd5b506060516064358060405190131561042657600080fd5b809190121561043457600080fd5b506060516084358060405190131561044b57600080fd5b809190121561045957600080fd5b5060605160a4358060405190131561047057600080fd5b809190121561047e57600080fd5b506402540be40060043502600160a05181830283158385830514176104a257600080fd5b6402540be40081059050806080519013156104bc57600080fd5b80919012156104ca57600080fd5b90509050610140526402540be40060243502600160a05181830283158385830514176104f557600080fd5b6402540be400810590508060805190131561050f57600080fd5b809190121561051d57600080fd5b90509050610160526402540be40060443502600160a051818302831583858305141761054857600080fd5b6402540be400810590508060805190131561056257600080fd5b809190121561057057600080fd5b90509050610180526402540be40060643502600160a051818302831583858305141761059b57600080fd5b6402540be40081059050806080519013156105b557600080fd5b80919012156105c357600080fd5b905090506101a0526402540be40060843502600160a05181830283158385830514176105ee57600080fd5b6402540be400810590508060805190131561060857600080fd5b809190121561061657600080fd5b905090506101c0526402540be40060a43502600160a051818302831583858305141761064157600080fd5b6402540be400810590508060805190131561065b57600080fd5b809190121561066957600080fd5b905090506101e0526101405115156106f2576402540be400610160516b204fce5e3e2502611000000060a05181830283158385830514176106a957600080fd5b6402540be40081059050806080519013156106c357600080fd5b80919012156106d157600080fd5b9050905060008112156106e357600080fd5b0460005260206000f3506109da565b610180516101405160a051818061070857600080fd5b6402540be4008402058060805190131561072157600080fd5b809190121561072f57600080fd5b90509050610200526101a051610200511315610908576101c0516101e05160a051818302831583858305141761076457600080fd5b6402540be400810590508060805190131561077e57600080fd5b809190121561078c57600080fd5b90509050610220526402540be400610200516101c05160a05181830283158385830514176107b957600080fd5b6402540be40081059050806080519013156107d357600080fd5b80919012156107e157600080fd5b905090506101605160a051818301806080519013156107ff57600080fd5b809190121561080d57600080fd5b90509050610200516101a05160a0518183038060805190131561082f57600080fd5b809190121561083d57600080fd5b905090506102205160a051818302831583858305141761085c57600080fd5b6402540be400810590508060805190131561087657600080fd5b809190121561088457600080fd5b9050905060a0518183018060805190131561089e57600080fd5b80919012156108ac57600080fd5b90509050600160a05181806108c057600080fd5b6402540be400840205806080519013156108d957600080fd5b80919012156108e757600080fd5b9050905060008112156108f957600080fd5b0460005260206000f3506109d9565b6402540be400610200516101c05160a051818302831583858305141761092d57600080fd5b6402540be400810590508060805190131561094757600080fd5b809190121561095557600080fd5b905090506101605160a0518183018060805190131561097357600080fd5b809190121561098157600080fd5b90509050600160a051818061099557600080fd5b6402540be400840205806080519013156109ae57600080fd5b80919012156109bc57600080fd5b9050905060008112156109ce57600080fd5b0460005260206000f3505b5b005b5b60006000fd5b610155610b3803610155600039610155610b38036000f3",
  "deployedBytecode": "0x600436101561000d576109dd565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a052632e6e4f3160005114156103885734156100ba57600080fd5b6402540be40060206101c0600463f8f9da286101605261017c6000545afa6100e157600080fd5b601f3d116100ee57600080fd5b6000506101c0510260805181111561010557600080fd5b61014052610140516b204fce5e3e2502611000000060a051818061012857600080fd5b6402540be4008402058060805190131561014157600080fd5b809190121561014f57600080fd5b905090506534630b8a000060a051818302831583858305141761017157600080fd5b6402540be400810590508060805190131561018b57600080fd5b809190121561019957600080fd5b905090506402540be40060a051818301806080519013156101b957600080fd5b80919012156101c757600080fd5b905090506101e0526101e0516101e05160a05181830283158385830514176101ee57600080fd5b6402540be400810590508060805190131561020857600080fd5b809190121561021657600080fd5b9050905061020052610220600061016a818352015b610200516101e05160a051818302831583858305141761024a57600080fd5b6402540be400810590508060805190131561026457600080fd5b809190121561027257600080fd5b90509050610200525b815160010180835281141561022b575b5050610200516402540be40060a051818303806080519013156102ad57600080fd5b80919012156102bb57600080fd5b90509050610240526102405164e8d4a5100060a05181830283158385830514176102e457600080fd5b6402540be40081059050806080519013156102fe57600080fd5b809190121561030c57600080fd5b90509050610260526402540be400610260516b204fce5e3e2502611000000060a051818302831583858305141761034257600080fd5b6402540be400810590508060805190131561035c57600080fd5b809190121561036a57600080fd5b90509050600081121561037c57600080fd5b0460005260206000f350005b639fbe990360005114156109dc5734156103a157600080fd5b606051600435806040519013156103b757600080fd5b80919012156103c557600080fd5b50606051602435806040519013156103dc57600080fd5b80919012156103ea57600080fd5b506060516044358060405190131561040157600080fd5b809190121561040f57600080fd5b506060516064358060405190131561042657600080fd5b809190121561043457600080fd5b506060516084358060405190131561044b57600080fd5b809190121561045957600080fd5b5060605160a4358060405190131561047057600080fd5b809190121561047e57600080fd5b506402540be40060043502600160a05181830283158385830514176104a257600080fd5b6402540be40081059050806080519013156104bc57600080fd5b80919012156104ca57600080fd5b90509050610140526402540be40060243502600160a05181830283158385830514176104f557600080fd5b6402540be400810590508060805190131561050f57600080fd5b809190121561051d57600080fd5b90509050610160526402540be40060443502600160a051818302831583858305141761054857600080fd5b6402540be400810590508060805190131561056257600080fd5b809190121561057057600080fd5b90509050610180526402540be40060643502600160a051818302831583858305141761059b57600080fd5b6402540be40081059050806080519013156105b557600080fd5b80919012156105c357600080fd5b905090506101a0526402540be40060843502600160a05181830283158385830514176105ee57600080fd5b6402540be400810590508060805190131561060857600080fd5b809190121561061657600080fd5b905090506101c0526402540be40060a43502600160a051818302831583858305141761064157600080fd5b6402540be400810590508060805190131561065b57600080fd5b809190121561066957600080fd5b905090506101e0526101405115156106f2576402540be400610160516b204fce5e3e2502611000000060a05181830283158385830514176106a957600080fd5b6402540be40081059050806080519013156106c357600080fd5b80919012156106d157600080fd5b9050905060008112156106e357600080fd5b0460005260206000f3506109da565b610180516101405160a051818061070857600080fd5b6402540be4008402058060805190131561072157600080fd5b809190121561072f57600080fd5b90509050610200526101a051610200511315610908576101c0516101e05160a051818302831583858305141761076457600080fd5b6402540be400810590508060805190131561077e57600080fd5b809190121561078c57600080fd5b90509050610220526402540be400610200516101c05160a05181830283158385830514176107b957600080fd5b6402540be40081059050806080519013156107d357600080fd5b80919012156107e157600080fd5b905090506101605160a051818301806080519013156107ff57600080fd5b809190121561080d57600080fd5b90509050610200516101a05160a0518183038060805190131561082f57600080fd5b809190121561083d57600080fd5b905090506102205160a051818302831583858305141761085c57600080fd5b6402540be400810590508060805190131561087657600080fd5b809190121561088457600080fd5b9050905060a0518183018060805190131561089e57600080fd5b80919012156108ac57600080fd5b90509050600160a05181806108c057600080fd5b6402540be400840205806080519013156108d957600080fd5b80919012156108e757600080fd5b9050905060008112156108f957600080fd5b0460005260206000f3506109d9565b6402540be400610200516101c05160a051818302831583858305141761092d57600080fd5b6402540be400810590508060805190131561094757600080fd5b809190121561095557600080fd5b905090506101605160a0518183018060805190131561097357600080fd5b809190121561098157600080fd5b90509050600160a051818061099557600080fd5b6402540be400840205806080519013156109ae57600080fd5b80919012156109bc57600080fd5b9050905060008112156109ce57600080fd5b0460005260206000f3505b5b005b5b60006000fd",
  "source": "# (c) 2020 Greenwood\n# @title Greenwood Calculator\n# @author Greenwood\n# @notice An external calculation contract for the Greenwood protocol\n\ninterface CTOKEN:\n    def borrowRatePerBlock() -> uint256: view\n    def getCash() -> uint256: view\n    def totalBorrows() -> uint256: view\n    def totalReserves() -> uint256: view\n\ninterface MODEL:\n    def getBorrowRate(_cash: uint256, _borrows: uint256, _reserves: uint256) -> uint256: view\n\nBLOCKS_PER_DAY: constant(decimal) = 5760.0\nETH_PRECISION: constant(decimal) = 1000000000000000000.0\nCONTRACT_PRECISION: constant(decimal) = 0.0000000001\nDECIMAL_ZERO: constant(decimal) = 0.0\n\nctokenHandle: CTOKEN\nmodelHandle: MODEL\nprevIndex: decimal\nprevAccruedBlock: uint256\n\n@external\ndef __init__(_ctoken_addr: address, _model_addr: address, _initial_block: uint256, initial_float_index: uint256):\n    self.ctokenHandle = CTOKEN(_ctoken_addr)\n    self.modelHandle = MODEL(_model_addr)\n    self.prevAccruedBlock = _initial_block\n    self.prevIndex = convert(initial_float_index, decimal) / ETH_PRECISION\n\n@external\n@view\ndef getFloatIndex() -> uint256:\n    rate: decimal = convert(self.ctokenHandle.borrowRatePerBlock(), decimal)\n    t0: decimal = rate / ETH_PRECISION * BLOCKS_PER_DAY + 1.0\n    t1: decimal = t0 * t0\n    for i in range(362):\n        t1 = t1 * t0\n    t2: decimal = t1 - 1.0\n    t3: decimal = t2 * 100.0\n    return convert(t3 * ETH_PRECISION, uint256) # 18928326320000000000 i.e. 18.928\n\n# @external\n# def getFloatIndexWolff() -> uint256:\n\n#     # fetch args for getBorrowRate from the cToken\n#     cash: uint256 = self.ctokenHandle.getCash() # 200384317996245895640\n#     borrows: uint256 = self.ctokenHandle.totalBorrows() # 45384209668008753763016\n#     reserves: uint256 = self.ctokenHandle.totalReserves() # 1\n\n#     # fetch current borrow rate form the cToken interest rate model\n#     borrowRate: decimal = convert(self.modelHandle.getBorrowRate(cash, borrows, reserves), decimal) # 82736710168\n\n#     # calculate blocks accrued\n#     currentBlock: uint256 = block.number # 21985342\n#     blocksAccrued: decimal = convert(currentBlock - self.prevAccruedBlock, decimal) # 21985336\n\n#     # catch for no new blocks\n\n#     # calculate the newFloatIndex\n#     newFloatIndex: decimal = (1.0 + blocksAccrued * (borrowRate / ETH_PRECISION)) * self.prevIndex # 189941687300000000\n\n#     # update prevIndex and prevAccrued block\n#     self.prevIndex = newFloatIndex\n#     self.prevAccruedBlock = currentBlock\n    \n#     # return Max's float index calculation to the core contract\n#     return convert(newFloatIndex * 100.0 * ETH_PRECISION, uint256) # 18994168730000000000 i.e. 18.994\n\n@external\n@view\ndef getFee(_total_liquidity: int128, _fee_base: int128, _active_collateral: int128, _utilization_inflection: int128, _fee_sensitivity: int128, _utilization_multiplier: int128) -> uint256:\n    totalLiquidity: decimal = convert(_total_liquidity, decimal) * CONTRACT_PRECISION\n    feeBase: decimal = convert(_fee_base,decimal) * CONTRACT_PRECISION\n    activeCollateral: decimal = convert(_active_collateral,decimal) * CONTRACT_PRECISION\n    utilizationInflection: decimal = convert(_utilization_inflection,decimal) * CONTRACT_PRECISION\n    feeSensitivity: decimal = convert(_fee_sensitivity, decimal) * CONTRACT_PRECISION\n    utilizationMultiplier: decimal = convert(_utilization_multiplier, decimal) * CONTRACT_PRECISION\n\n    if totalLiquidity == DECIMAL_ZERO:\n        return convert(feeBase * ETH_PRECISION, uint256)\n    else:\n        utilization: decimal = activeCollateral / totalLiquidity\n        if utilization > utilizationInflection:\n            feeMultiplier: decimal = feeSensitivity * utilizationMultiplier\n            return convert(((utilization * feeSensitivity + feeBase) + ((utilization - utilizationInflection) * feeMultiplier)) / CONTRACT_PRECISION, uint256)\n\n        else:\n            return convert((utilization * feeSensitivity + feeBase) / CONTRACT_PRECISION, uint256)",
  "sourcePath": "/Users/brandonmcfaraland/Desktop/protocol/dev_protocol_contracts/contracts/alpha/alpha_calculator.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.2.3+commit.006968f"
  },
  "networks": {
    "1": {
      "events": {},
      "links": {},
      "address": "0xe5dD18E3DdeF584cc0751de76Efe98fd5aAA927f",
      "transactionHash": "0x074140ed4df8b697b056ad2e57271373bf62247f6f43b493fb7e2e18893b565f"
    },
    "42": {
      "events": {},
      "links": {},
      "address": "0x5fF2CDd2181e494D2c51C5DF6b8ba0eBe28b9c9b",
      "transactionHash": "0xcd52802ada92cecd5c5e7f0e2fcd22a64547aed43e14e7c9c2388e6598670308"
    }
  },
  "schemaVersion": "3.2.0",
  "updatedAt": "2020-11-11T13:36:33.239Z",
  "networkType": "ethereum"
}
  
  module.exports = calculator;